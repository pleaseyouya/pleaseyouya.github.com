<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Pleaseyouya's Blog]]></title>
  <subtitle><![CDATA[Step by step]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://pleaseyouya.com/"/>
  <updated>2016-02-01T15:20:55.000Z</updated>
  <id>http://pleaseyouya.com/</id>
  
  <author>
    <name><![CDATA[pleaseyouya]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[记Proguard过程中踩过的几个坑]]></title>
    <link href="http://pleaseyouya.com/2016/02/01/%E8%AE%B0Proguard%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E8%BF%87%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9D%91/"/>
    <id>http://pleaseyouya.com/2016/02/01/记Proguard过程中踩过的几个坑/</id>
    <published>2016-02-01T14:37:53.000Z</published>
    <updated>2016-02-01T15:20:55.000Z</updated>
    <content type="html"><![CDATA[<p>今天在打release包，加混淆。打包过程中，报了几个错。</p>
<p><strong>Error:ProGuard: Can’t process class… (Unsupported class version number <a href="maximum 51.0, Java 1.7">52.0</a>))</strong></p>
<p>看了下ProGuard的版本，切换到D:\ADT\sdk\tools\proguard\lib，<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">java</span> <span class="tag">-jar</span> <span class="tag">proguard</span><span class="class">.jar</span></span><br></pre></td></tr></table></figure></p>
<p><img src="../../../../images/version47.jpg" alt="version too low"><br>Proguard的版本是4.7，而根据Proguard版本的JDK版本的关系</p>
<blockquote>
<p>J2SE 8 = 52,<br>J2SE 7 = 51,<br>J2SE 6.0 = 50,<br>J2SE 5.0 = 49,<br>JDK 1.4 = 48,<br>JDK 1.3 = 47,<br>JDK 1.2 = 46,<br>JDK 1.1 = 45</p>
</blockquote>
<p>我的JDK是1.8版本的，所以，需要Proguard更新到5.2。<br>更新的方法是，<strong>下载最新版的Proguard包，解压之后，将proguard文件夹直接覆盖D:\ADT\sdk\tools\proguard</strong>即可。</p>
<p><strong>Error:ProGuard: [MSearch] Warning: com…: can’t find referenced class android.content.pm.PackageParser</strong><br>这是一些没必要混淆的类被混淆了，比如这里的PackageParser，导致找不到，可通过<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">keep <span class="class"><span class="keyword">class</span> <span class="title">android</span>.<span class="title">content</span>.<span class="title">pm</span>.**</span></span><br><span class="line"></span>-<span class="ruby">dontwarn android.content.pm.**</span></span><br></pre></td></tr></table></figure></p>
<p>阻止被混淆。</p>
<p><strong>Error:ProGuard: unexpected error while shrinking instructions after partial evaluation</strong><br>这个问题是因为进行了混淆优化过程发生的错误，可以把混淆优化禁掉。<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-dontoptimize</span></span><br></pre></td></tr></table></figure></p>
<p><strong>打debug包，如何覆盖android默认的debug.keystore呢</strong><br>有两种方法，方法一：</p>
<ol>
<li>生成自定义的debug.keystore</li>
<li>Build-&gt;Generate Signed Apk</li>
</ol>
<p><img src="../../../../images/update_debug_keystore.jpg" alt="Generate signed apk"></p>
<blockquote>
<p>key alias: androiddebugkey<br>keystore password: android</p>
</blockquote>
<p>方法二：<br>直接替换默认的debug.keystore即可，路径在</p>
<blockquote>
<p>C:\Users\&lt;用户名&gt;.android\debug.keystore</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在打release包，加混淆。打包过程中，报了几个错。</p>
<p><strong>Error:ProGuard: Can’t process class… (Unsupported class version number <a href="maximum 51.0]]>
    </summary>
    
      <category term="android" scheme="http://pleaseyouya.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅谈ReentrantLock:公平锁版本]]></title>
    <link href="http://pleaseyouya.com/2016/02/01/%E6%B5%85%E8%B0%88ReentrantLock-%E5%85%AC%E5%B9%B3%E9%94%81%E7%89%88%E6%9C%AC/"/>
    <id>http://pleaseyouya.com/2016/02/01/浅谈ReentrantLock-公平锁版本/</id>
    <published>2016-01-31T16:36:20.000Z</published>
    <updated>2016-01-31T17:10:50.000Z</updated>
    <content type="html"><![CDATA[<p>上文讨论ReentrantLock的非公平锁版本，本文来说说公平锁版本。</p>
<a id="more"></a>
<p>1、FairSync如何进行lock操作？<br>下面为加锁的流程：<br><img src="../../../../images/fair_lock.png" alt="lock"></p>
<p>和NonFairSync的流程图比较，有两个地方不同，<br>(1)NonFairSync有两次try lock，而FairSync只有一次try lock。</p>
<p>那么，有一个疑问，既然FairSync是公平锁，为什么一开始就可以try lock，而不是放进CLH队列呢？<br>这就是和NonFairSync的第二个不同点了。<br>(2)NonFairSync和FairSync的try lock操作不一样。</p>
<p>先来讨论，为什么一开始就可以try lock，而不是放进CLH队列呢？<br>考虑两种情况：</p>
<ol>
<li>如果锁未被占用，并且CLH队列本身就是空的，或者说CLH里面的节点都无效(Canceled)，那么，当前节点可以直接去竞争锁，这是公平的(因为就只有当前线程竞争锁)</li>
<li>如果当前线程已经拥有锁，即现在是重入，那么，也无需再加入CLH了。</li>
</ol>
<p>看下FairSync版的tryAcquire:<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="function"><span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">            compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        ...</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>首先，判断当前锁未被占用，且队列CLH无有效节点!hasQueuedPredecessors()，则直接去竞争锁compareAndSetState(0, acquires)。</p>
<p>如果锁已被占用，但是占用线程就是自己(重入)，那么，直接更新锁状态setState(nextc)。</p>
<p>2、FairSync如何进行unlock？<br>FairSync和NonFairSync的unlock操作完全一样。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上文讨论ReentrantLock的非公平锁版本，本文来说说公平锁版本。</p>]]>
    
    </summary>
    
      <category term="concurrent" scheme="http://pleaseyouya.com/tags/concurrent/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅谈ReentrantLock:非公平锁版本]]></title>
    <link href="http://pleaseyouya.com/2016/01/31/%E6%B5%85%E8%B0%88ReentrantLock-%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81%E7%89%88%E6%9C%AC/"/>
    <id>http://pleaseyouya.com/2016/01/31/浅谈ReentrantLock-非公平锁版本/</id>
    <published>2016-01-31T09:17:44.000Z</published>
    <updated>2016-01-31T15:31:26.000Z</updated>
    <content type="html"><![CDATA[<p>谈到PriorityBlockingQueue的添加元素和取元素时，都需要获取锁。这里的锁是ReentrantLock。</p>
<a id="more"></a>
<p>ReentrantLock有公平锁和非公平锁两种版本。那么，PriorityBlockingQueue用的是哪种版本呢？<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PriorityBlockingQueue</span><span class="params">(<span class="keyword">int</span> initialCapacity,</span><br><span class="line">                                 Comparator&lt;? <span class="keyword">super</span> E&gt; comparator)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">this</span>.lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync = <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>PriorityBlockingQueue使用ReentrantLock的默认构造函数，实例化lock。而ReentrantLock默认使用非公平锁。</p>
<p>本文来讨论ReentrantLock的非公平锁版本。<br>ReentrantLock实际上是委托sync来实现lock和unlock等功能的。<br>那么,sync是什么呢？</p>
<p>1、什么是Sync？<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">static <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Sync</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">static <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FairSync</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Sync</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> static <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AbstractQueuedSynchronizer</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Sync有两个版本：NonfairSync和FairSync。ReentrantLock的版本(公平 or 非公平)实际上是由Sync决定的。<br>而Sync继承AbstractQueuedSynchronizer。</p>
<p>2、NonfairSync如何进行lock操作？<br>加锁操作流程如下：</p>
<p><img src="../../../../images/nonfair_lock.png" alt="lock"></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">final <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>公平的意思是，越早希望获取锁的线程，就越有希望获取成功。<br>而非公平的意思则是，较晚争取锁的线程，可能先与较早的线程成功获取锁。</p>
<p>compareAndSetState(0,1)体现了非公平。compareAndSetState就是在尝试获取锁，此时有可能有其他线程更早提出获取锁的请求，如果compareAndSetState成功，则当前线程成功竞争到锁，这对于更早竞争锁，但未成功的其他线程是不公平的。</p>
<p>如果state为0，表示锁尚未被占用，非0表示锁已经被占用。<br>因为可能存在多个线程同时竞争锁，所以使用CAS：如果当前锁尚未被占用(状态0)，则被当前线程占用成功(状态改为1)，CAS的操作是原子性的。</p>
<p>如果竞争失败，调用acquire(1)。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>tryAcquire(arg)：体现不公平的第二点。当前线程有第二次机会，直接和其他线程竞争锁。</p>
<p>如果竞争锁再次失败，<br>acquireQueued(addWaiter(Node.EXCLUSIVE), arg)：将当前线程封装成node，加入CLH队列，公平竞争锁(先进先出)。</p>
<p>来看看tryAcquire(arg)：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="function"><span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="title">nonfairTryAcquire</span><span class="params">(acquires)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="function"><span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        ...</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果锁尚未被占用，<br>compareAndSetState(0, acquires)：再次尝试竞争锁。</p>
<p>如果锁已被占用，并且是当前线程占用锁，<br>setState(nextc)：更新锁的状态。这里体现了可重入锁的特性，当前线程可以多次获取该锁。</p>
<p>3、NonfairSync如何进行解锁？<br>解锁流程如下</p>
<p><img src="../../../../images/nonfair_unlock.jpg" alt="unlock"></p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync.release(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">        Node h = head;</span><br><span class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先，尝试释放锁，tryRelease(1)，</p>
<p>如果成功，<br>unparkSuccessor(h)：唤醒CLH队列中第一个有效的节点(节点的waitStatus不是canceled则有效)。</p>
<p>如何尝试释放锁？看看tryRelease<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="function"><span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = getState() - releases;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        free = <span class="keyword">true</span>;</span><br><span class="line">        setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    setState(c);</span><br><span class="line">    <span class="keyword">return</span> free;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>计算新的状态，如果状态为0(锁彻底释放，其他线程可以重新竞争)<br>setExclusiveOwnerThread(null)把占用锁的线程置空。</p>
<p>更新状态，<br>setState(c)：因为当前线程还没有释放锁，所以不需要CAS操作。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>谈到PriorityBlockingQueue的添加元素和取元素时，都需要获取锁。这里的锁是ReentrantLock。</p>]]>
    
    </summary>
    
      <category term="concurrent" scheme="http://pleaseyouya.com/tags/concurrent/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[谈谈BlockingQueue的take, poll]]></title>
    <link href="http://pleaseyouya.com/2016/01/30/BlockingQueue%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0take%E5%8A%9F%E8%83%BD/"/>
    <id>http://pleaseyouya.com/2016/01/30/BlockingQueue怎么实现take功能/</id>
    <published>2016-01-30T14:38:14.000Z</published>
    <updated>2016-01-31T08:22:48.000Z</updated>
    <content type="html"><![CDATA[<p>本文来谈一下BlockingQueue的take，poll方法。以PriorityBlockingQueue为例子。</p>
<a id="more"></a>
<p>take：从队列中取出第一个数据，如果队列为空，线程将被阻塞。</p>
<p>poll有两个版本：</p>
<ol>
<li>poll()<br>不会发生阻塞。从队列中取出第一个数据，如果队列为空，直接返回null。</li>
<li>poll(long timeout, TimeUnit unit)<br>可能发生阻塞，但阻塞时间最多不会超过timeout。从队列中取出第一个数据。如果队列为空，线程将被阻塞，如果在timeout之前被唤醒，则可以继续尝试。如果timeout，则返回null。</li>
</ol>
<p>先来说take()。<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public E take() throws <span class="type">InterruptedException</span> &#123;</span><br><span class="line">    lock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> ( (<span class="literal">result</span> = dequeue()) == null)</span><br><span class="line">            notEmpty.await();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>首先，获取主锁。获取主锁的过程中可以被中断。<br>从队列中取第一个元素，如果队列为空，则等待队列非空，此时线程阻塞。</p>
<p>注意，notEmpty.await会先释放主锁，然后进入阻塞状态，直到队列非空。<br>当队列非空，退出阻塞状态时，会重新获取主锁。</p>
<p>退出阻塞状态后，重新尝试从队列获取队首元素。<br>最后，释放主锁。</p>
<p>poll()<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">poll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">lock</span>.<span class="keyword">lock</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dequeue();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">lock</span>.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>首先，获取主锁。但是和take不一样的是，获取锁的过程中不会被中断。<br>然后，直接从队列取队首元素，如果元素为空，直接返回null。<br>最后，释放主锁。</p>
<p>poll(long timeout, TimeUnit unit)<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public E poll(long timeout, <span class="type">TimeUnit</span> unit) throws <span class="type">InterruptedException</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    lock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> ( (<span class="literal">result</span> = dequeue()) == null &amp;&amp; nanos &gt; <span class="number">0</span>)</span><br><span class="line">            nanos = notEmpty.awaitNanos(nanos);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果取队首元素失败（队列为空），但是总的等待时间还没超过timeout，则进入阻塞状态，等待非空状态。<br>如果取队首元素失败（队列为空），但是总的等待时间已经超过timeout，则不再阻塞，直接返回null。</p>
<p>注意，这里的等待时间是，每次阻塞的时间总和，而不是每一次阻塞的时间。所以，本方法最多阻塞时间不会超过timeout。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文来谈一下BlockingQueue的take，poll方法。以PriorityBlockingQueue为例子。</p>]]>
    
    </summary>
    
      <category term="java" scheme="http://pleaseyouya.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BlockingQueue怎么实现put功能]]></title>
    <link href="http://pleaseyouya.com/2016/01/28/BlockingQueue%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0put%E5%8A%9F%E8%83%BD/"/>
    <id>http://pleaseyouya.com/2016/01/28/BlockingQueue怎么实现put功能/</id>
    <published>2016-01-28T15:50:18.000Z</published>
    <updated>2016-01-31T08:31:15.000Z</updated>
    <content type="html"><![CDATA[<p>volley源码中，网络请求队列mNetworkQueue被缓存线程和若干个网络线程访问，需要同步。<br>volley采用PriorityBlockingQueue来实现不同线程间的同步。</p>
<p>其中，涉及到的操作有take，put, add。</p>
<p>本文分析PriorityBlockingQueue的put方法实现。</p>
<a id="more"></a>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="literal">void</span> put(E e) &#123;</span><br><span class="line">     offer(e); <span class="comment">// never need to block</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> offer(E e) &#123;</span><br><span class="line">    <span class="attribute">...</span></span><br><span class="line">    lock<span class="built_in">.</span>lock();</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">...</span></span><br><span class="line">    <span class="comment">// 分配空间，有可能分配失败。失败情况下重新尝试分配。</span></span><br><span class="line">    <span class="keyword">while</span> ((n = size) &gt;= (cap = (<span class="built_in">array</span> = <span class="built_in">queue</span>)<span class="built_in">.</span>length))</span><br><span class="line">        tryGrow(<span class="built_in">array</span>, cap);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cmp == <span class="built_in">null</span>)</span><br><span class="line">        siftUpComparable(n, e, <span class="built_in">array</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        siftUpUsingComparat<span class="subst">or</span>(n, e, <span class="built_in">array</span>, cmp);</span><br><span class="line">    <span class="attribute">...</span></span><br><span class="line">    notEmpty<span class="built_in">.</span>signal();</span><br><span class="line">    </span><br><span class="line">    lock<span class="built_in">.</span>unlock();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>put实际是调用offer方法。<br>其实，PriorityBlockingQueue添加元素的方法有add、offer、offer(timeout)、add，然而实际上都是调用offer来实现的。</p>
<p>首先，获取主锁。</p>
<p>如果目前数据量已经充满(达到capacity)，重新分配空间。<br>分配空间，有可能分配失败。失败情况下重新尝试分配。</p>
<p>根据定义的优先级，将数据放到合适的位置。<br>此时，queue肯定非空，释放非空信号。</p>
<p>最后，释放主锁。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>volley源码中，网络请求队列mNetworkQueue被缓存线程和若干个网络线程访问，需要同步。<br>volley采用PriorityBlockingQueue来实现不同线程间的同步。</p>
<p>其中，涉及到的操作有take，put, add。</p>
<p>本文分析PriorityBlockingQueue的put方法实现。</p>]]>
    
    </summary>
    
      <category term="concurrent" scheme="http://pleaseyouya.com/tags/concurrent/"/>
    
      <category term="java" scheme="http://pleaseyouya.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Thread.yield()是什么意思]]></title>
    <link href="http://pleaseyouya.com/2016/01/28/Thread-yield-%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/"/>
    <id>http://pleaseyouya.com/2016/01/28/Thread-yield-是什么意思/</id>
    <published>2016-01-28T13:27:44.000Z</published>
    <updated>2016-01-30T09:37:55.000Z</updated>
    <content type="html"><![CDATA[<p>thread.yield()这个方法是什么意思？<br>yield中文翻译，可以译成”让步”。yield()是否是把执行权让给其他线程的意思？</p>
<p>不是。yield()表示交出当前的Cpu时间，也就是让Cpu进入可重新分配的状态。而当前线程则由运行状态转入准备状态。<br>此时，当前线程和其他线程一样，都在准备状态(在同一起跑线上)，一起竞争CPU的使用权。</p>
<p>所以，thread.yield()只是让CPU空闲下来，重新再选一个线程执行。<br>新被选中的线程有可能是其他线程，但也可能，还是当前线程。</p>
<a id="more"></a>
<p>看一个例子。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Thread</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> tag;</span><br><span class="line">    public <span class="type">TestThread</span>(<span class="type">String</span> tag) &#123;</span><br><span class="line">        <span class="keyword">this</span>.tag = tag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    public void run() &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        <span class="type">System</span>.out.println(tag + <span class="string">" 1"</span>);</span><br><span class="line">        <span class="type">Thread</span>.<span class="keyword">yield</span>();</span><br><span class="line">        <span class="type">System</span>.out.println(tag + <span class="string">" 2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>TestThread的实例是一个线程, tag代表了线程名字。<br>线程跑起来，先输出1，然后交出cpu，在抢夺cpu，如果抢到了，输出2.</p>
<p>测试代码：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    TestThread thread1 = <span class="keyword">new</span> TestThread(<span class="string">"thread1"</span>);</span><br><span class="line">    TestThread thread2 = <span class="keyword">new</span> TestThread(<span class="string">"thread2"</span>);</span><br><span class="line">    thread1.start();</span><br><span class="line">    thread2.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>测试结果1：</p>
<blockquote>
<p>thread1 1<br>thread2 1<br>thread1 2<br>thread2 2</p>
</blockquote>
<p>线程1输出1，yield，交出cpu<br>线程2抢到cpu，输出1，然后yield，交出cpu<br>线程1抢到cpu，输出2，线程1结束。<br>最后，cpu给线程2执行，输出2，线程2结束。</p>
<p>测试结果2：</p>
<blockquote>
<p>thread1 1<br>thread2 1<br>thread2 2<br>thread1 2</p>
</blockquote>
<p>线程1输出1， yield，交出cpu<br>线程2抢到cpu，输出1，然后yield，交出cpu<br>线程2再次抢到cpu，输出2，线程2结束。<br>最后，cpu给线程1执行，输出2，线程1结束。</p>
<p>测试结果3：</p>
<blockquote>
<p>thread1 1<br>thread1 2<br>thread2 1<br>thread2 2</p>
</blockquote>
<p>线程1输出1，yield，交出cpu<br>线程1再次抢到cpu，输出2，线程1结束。<br>cpu交给线程2，输出1, yield，交出cpu<br>此时只有线程2，必然得到cpu时间，输出2，线程2结束。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>thread.yield()这个方法是什么意思？<br>yield中文翻译，可以译成”让步”。yield()是否是把执行权让给其他线程的意思？</p>
<p>不是。yield()表示交出当前的Cpu时间，也就是让Cpu进入可重新分配的状态。而当前线程则由运行状态转入准备状态。<br>此时，当前线程和其他线程一样，都在准备状态(在同一起跑线上)，一起竞争CPU的使用权。</p>
<p>所以，thread.yield()只是让CPU空闲下来，重新再选一个线程执行。<br>新被选中的线程有可能是其他线程，但也可能，还是当前线程。</p>]]>
    
    </summary>
    
      <category term="Java" scheme="http://pleaseyouya.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[volley源码解析]]></title>
    <link href="http://pleaseyouya.com/2016/01/24/volley%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://pleaseyouya.com/2016/01/24/volley源码解析/</id>
    <published>2016-01-24T12:52:06.000Z</published>
    <updated>2016-01-30T09:25:42.000Z</updated>
    <content type="html"><![CDATA[<p>怎么对源码进行解析？从什么样的角度进行描述，以避免像写流水账一样，前后毫无衔接？一直都在思考这个问题。<br>在还没有找到合适的方式前，还是先从实际的例子出发，然后对例子的内部流程是怎么走的，进行一个分析吧。</p>
<a id="more"></a>
<p>看下面这个例子，<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RequestQueue mQueue = Volley.newRequestQueue(getApplicationContext());</span><br><span class="line">StringRequest getStringRequest = <span class="keyword">new</span> StringRequest(<span class="string">"http://www.baidu.com"</span>, <span class="keyword">new</span> ResponseListener(), <span class="keyword">new</span> ResponseErrorListener());</span><br><span class="line">mQueue.<span class="built_in">add</span>(getStringRequest);</span><br></pre></td></tr></table></figure></p>
<p>请求url的数据，并设置空的response listener和error listener。</p>
<p>我们来看看mQueue.add(getStringRequest)这一行，内部都做了什么。<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="built_in">Request</span>&lt;T&gt; add(<span class="built_in">Request</span>&lt;T&gt; <span class="built_in">request</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">request</span>.shouldCache()) &#123;</span><br><span class="line">        mNetworkQueue.add(<span class="built_in">request</span>);</span><br><span class="line">        return <span class="built_in">request</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    synchronized (mWaitingRequests) &#123;</span><br><span class="line">        <span class="built_in">String</span> cacheKey = <span class="built_in">request</span>.getCacheKey();</span><br><span class="line">        <span class="keyword">if</span> (mWaitingRequests.containsKey(cacheKey)) &#123;</span><br><span class="line">            Queue&lt;<span class="built_in">Request</span>&lt;?&gt;&gt; stagedRequests = mWaitingRequests.<span class="keyword">get</span>(cacheKey);</span><br><span class="line">            ...</span><br><span class="line">            stagedRequests.add(<span class="built_in">request</span>);</span><br><span class="line">            mWaitingRequests.put(cacheKey, stagedRequests);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mWaitingRequests.put(cacheKey, <span class="literal">null</span>);</span><br><span class="line">            mCacheQueue.add(<span class="built_in">request</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        return <span class="built_in">request</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>一共有两个队列：存储网络请求的mNetworkQueue，直接从缓存获取结果的请求队列mCacheQueue。</p>
<p>mWaitingRequests存储了不同类型的缓存请求, 用cacheKey来识别不同的缓存请求。<br>每个cacheKey对应的value，是一个链表。链表里存储了等待执行的多个同种请求。</p>
<p>如果请求不从缓存取，则直接加入mNetworkQueue。否则，加入mCacheQueue，从缓存取结果。</p>
<p>1、mCacheQueue和mNetworkQueue里面的请求由谁来处理？<br>例子中第一行，创建了一个requestQueue对象，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestQueue <span class="title">newRequestQueue</span><span class="params">(Context context, HttpStack <span class="built_in">stack</span>)</span> </span>&#123;</span><br><span class="line">    File cacheDir = <span class="keyword">new</span> File(context.getCacheDir(), DEFAULT_CACHE_DIR);</span><br><span class="line">    ...</span><br><span class="line">    Network network = <span class="keyword">new</span> BasicNetwork(<span class="built_in">stack</span>);</span><br><span class="line"></span><br><span class="line">    RequestQueue <span class="built_in">queue</span> = <span class="keyword">new</span> RequestQueue(<span class="keyword">new</span> DiskBasedCache(cacheDir), network);</span><br><span class="line">    <span class="built_in">queue</span>.start();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">queue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>创建request queue，会立即调用queue.start()。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stop();  </span><br><span class="line">    mCacheDispatcher = <span class="keyword">new</span> CacheDispatcher(mCacheQueue, mNetworkQueue, mCache,mDelivery);</span><br><span class="line">    mCacheDispatcher.start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mDispatchers.length; i++) &#123;</span><br><span class="line">        NetworkDispatcher networkDispatcher = <span class="keyword">new</span> NetworkDispatcher(mNetworkQueue, mNetwork,mCache, mDelivery);</span><br><span class="line">        mDispatchers[i] = networkDispatcher;</span><br><span class="line">        networkDispatcher.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>start开启了一个处理请求缓存线程mCacheDispatcher，和4个处理请求网络的线程networkDispatcher。</p>
<p>mCacheQueue里面的请求由mCacheDispatcher线程处理。<br>mNetworkQueue里面的请求由4个netWorkDispatcher线程处理。</p>
<p>2、mCacheDispatcher线程如何处理mCacheQueue里的请求<br>mCacheDispatcher线程启动，开始run方法<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> void run() &#123;</span><br><span class="line">    ...</span><br><span class="line">    mCache.initialize();</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        final <span class="built_in">Request</span>&lt;?&gt; <span class="built_in">request</span> = mCacheQueue.take();</span><br><span class="line">        ...                </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">request</span>.isCanceled()) &#123;</span><br><span class="line">            <span class="built_in">request</span>.finish(<span class="string">"cache-discard-canceled"</span>);</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Cache.Entry entry = mCache.<span class="keyword">get</span>(<span class="built_in">request</span>.getCacheKey());</span><br><span class="line">        <span class="keyword">if</span> (entry == <span class="literal">null</span>) &#123;</span><br><span class="line">            ...</span><br><span class="line">            mNetworkQueue.put(<span class="built_in">request</span>);</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (entry.isExpired()) &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="built_in">request</span>.setCacheEntry(entry);</span><br><span class="line">            mNetworkQueue.put(<span class="built_in">request</span>);</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        <span class="built_in">Response</span>&lt;?&gt; <span class="built_in">response</span> = <span class="built_in">request</span>.parseNetworkResponse(</span><br><span class="line">                <span class="keyword">new</span> NetworkResponse(entry.data, entry.responseHeaders));</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (!entry.refreshNeeded()) &#123;</span><br><span class="line">            mDelivery.postResponse(<span class="built_in">request</span>, <span class="built_in">response</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="built_in">request</span>.setCacheEntry(entry);</span><br><span class="line">            <span class="built_in">response</span>.intermediate = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            mDelivery.postResponse(<span class="built_in">request</span>, <span class="built_in">response</span>, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                <span class="keyword">public</span> void run() &#123;</span><br><span class="line">                    mNetworkQueue.put(<span class="built_in">request</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>while(true)说明线程会不断处理mCacheQueue中的请求。</p>
<p>首先，从队列中取出一个请求。<br>如果请求被取消，则不处理，继续下一个请求。</p>
<p>否则，根据request的cache key，在缓存中取相应的entry。<br>如果缓存中不存在该key对应的entry(缓存未命中)，将request转到mNewtworQueue中。<br>结束对该请求的处理。</p>
<p>如果取得entry，验证entry是否过期。<br>如果过期，带上entry，将request转到mNetworkQueue中。<br>结束对该请求的处理。</p>
<p>如果未过期，验证entry是否需要新鲜度验证。<br>如果需要，带上entry，将request转到mNetworkQueue中。<br>否则，将entry回传到response。</p>
<p>3、networkDispatcher线程如何处理mNetworkQueue里的请求<br>networkDispatcher线程启动，开始run方法<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void run() &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">request</span> = mQueue.take();</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">request</span>.isCanceled()) &#123;</span><br><span class="line">            <span class="built_in">request</span>.finish(<span class="string">"network-discard-cancelled"</span>);</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">        NetworkResponse networkResponse = mNetwork</span><br><span class="line">                .performRequest(<span class="built_in">request</span>);</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (networkResponse.notModified</span><br><span class="line">                &amp;&amp; <span class="built_in">request</span>.hasHadResponseDelivered()) &#123;</span><br><span class="line">            <span class="built_in">request</span>.finish(<span class="string">"not-modified"</span>);</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Response</span>&lt;?&gt; <span class="built_in">response</span> = <span class="built_in">request</span></span><br><span class="line">                .parseNetworkResponse(networkResponse);</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">request</span>.shouldCache() &amp;&amp; <span class="built_in">response</span>.cacheEntry != <span class="literal">null</span>) &#123;</span><br><span class="line">            mCache.put(<span class="built_in">request</span>.getCacheKey(), <span class="built_in">response</span>.cacheEntry);</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        mDelivery.postResponse(<span class="built_in">request</span>, <span class="built_in">response</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>while (true)说明networkDispatcher线程会不断处理mNetworkQueue里的请求。</p>
<p>如果请求被取消，则不处理，继续下一个请求。</p>
<p>否则，执行网络请求，得到networkResponse。<br>如果该networkResponse和之前同种请求的response一样，则不处理本次的response，继续下一个请求。</p>
<p>如果不一样，将networkResponse转化为需要的response。</p>
<p>如果response需要缓存，将response缓存在mCache。</p>
<p>最后，回传resonse。</p>
<p>4、mNetwork.preformRequest是如何执行网络请求的？<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> NetworkResponse performRequest(<span class="built_in">Request</span>&lt;?&gt; <span class="built_in">request</span>) throws VolleyError &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">        Map&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; headers = <span class="keyword">new</span> HashMap&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;();</span><br><span class="line">        addCacheHeaders(headers, <span class="built_in">request</span>.getCacheEntry());</span><br><span class="line">        httpResponse = mHttpStack.performRequest(<span class="built_in">request</span>, headers);</span><br><span class="line">        </span><br><span class="line">        StatusLine statusLine = httpResponse.getStatusLine();</span><br><span class="line">        <span class="built_in">int</span> statusCode = statusLine.getStatusCode();</span><br><span class="line"></span><br><span class="line">        responseHeaders = convertHeaders(httpResponse.getAllHeaders());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (statusCode == HttpStatus.SC_NOT_MODIFIED) &#123;</span><br><span class="line">            return <span class="keyword">new</span> NetworkResponse(HttpStatus.SC_NOT_MODIFIED,</span><br><span class="line">                    <span class="built_in">request</span>.getCacheEntry() == <span class="literal">null</span> ? <span class="literal">null</span> : <span class="built_in">request</span>.getCacheEntry().data,</span><br><span class="line">                    responseHeaders, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (statusCode == HttpStatus.SC_MOVED_PERMANENTLY || statusCode == HttpStatus.SC_MOVED_TEMPORARILY) &#123;</span><br><span class="line">            <span class="built_in">String</span> newUrl = responseHeaders.<span class="keyword">get</span>(<span class="string">"Location"</span>);</span><br><span class="line">            <span class="built_in">request</span>.setRedirectUrl(newUrl);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (httpResponse.getEntity() != <span class="literal">null</span>) &#123;</span><br><span class="line">          responseContents = entityToBytes(httpResponse.getEntity());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          responseContents = <span class="keyword">new</span> byte[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        return <span class="keyword">new</span> NetworkResponse(statusCode, responseContents, responseHeaders, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>首先，请求的header添加request对应的本地缓存结果。<br>委托mHttpStack执行请求，得到httpResponse。</p>
<p>获取statusCode和responseHeaders。</p>
<p>判断statusCode。如果response和本地缓存一样(not modified)，返回缓存的结果。<br>如果是地址重定向，从responseHeader获取新的地址。</p>
<p>否则，如果返回结果不为空，将结果转化为byte[]，并返回。</p>
<p>5、HttpStack如何处理网络请求？</p>
<p>HttpStack有两种实现，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">stack</span> == null) &#123;</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="built_in">stack</span> = <span class="keyword">new</span> HurlStack();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">stack</span> = <span class="keyword">new</span> HttpClientStack(AndroidHttpClient.newInstance(userAgent));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在Android 2.3以前，使用HttpClientStack。<br>在Android 2.3以后，使用HurlStack。</p>
<p>以HurlStack为例，看下如何处理网络请求。<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> HttpResponse performRequest(<span class="built_in">Request</span>&lt;?&gt; <span class="built_in">request</span>, Map&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; additionalHeaders)</span><br><span class="line">            throws IOException, AuthFailureError &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">String</span> headerName : map.keySet()) &#123;</span><br><span class="line">        connection.addRequestProperty(headerName, map.<span class="keyword">get</span>(headerName));</span><br><span class="line">    &#125;</span><br><span class="line">    setConnectionParametersForRequest(connection, <span class="built_in">request</span>);</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">int</span> responseCode = connection.getResponseCode();</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    BasicHttpResponse <span class="built_in">response</span> = <span class="keyword">new</span> BasicHttpResponse(responseStatus);</span><br><span class="line">    <span class="built_in">response</span>.setEntity(entityFromConnection(connection));</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;<span class="built_in">String</span>, List&lt;<span class="built_in">String</span>&gt;&gt; header : connection.getHeaderFields().entrySet()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (header.getKey() != <span class="literal">null</span>) &#123;</span><br><span class="line">            Header h = <span class="keyword">new</span> BasicHeader(header.getKey(), header.getValue().<span class="keyword">get</span>(<span class="number">0</span>));</span><br><span class="line">            <span class="built_in">response</span>.addHeader(h);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="built_in">response</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>首先，connection添加request header，添加请求方式(GET,POST,DELETE,PUT,HEAD,OPTIONS,TRACE,PATCH)。</p>
<p>从connection获取response code，entity, header，包装response。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>怎么对源码进行解析？从什么样的角度进行描述，以避免像写流水账一样，前后毫无衔接？一直都在思考这个问题。<br>在还没有找到合适的方式前，还是先从实际的例子出发，然后对例子的内部流程是怎么走的，进行一个分析吧。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://pleaseyouya.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[添加drawable的自定义View(gravity, padding, 宽高比)]]></title>
    <link href="http://pleaseyouya.com/2016/01/24/%E6%B7%BB%E5%8A%A0drawable%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89View-gravity-padding-%E5%AE%BD%E9%AB%98%E6%AF%94/"/>
    <id>http://pleaseyouya.com/2016/01/24/添加drawable的自定义View-gravity-padding-宽高比/</id>
    <published>2016-01-24T03:20:42.000Z</published>
    <updated>2016-01-30T09:41:00.000Z</updated>
    <content type="html"><![CDATA[<p>1、如何设置drawable的padding和gravity<br>可以在draw之前，通过Gravity的apply方法实现。</p>
<a id="more"></a>
<blockquote>
<p>public static void apply (int gravity, int w, int h, Rect container, int xAdj, int yAdj, Rect outRect)</p>
</blockquote>
<p>假设drawable命名为badge，gravity是badgeGravity，padding是badgePadding，<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">Rect</span> <span class="keyword">bound </span>= <span class="keyword">badge.getBounds();</span><br><span class="line"></span><span class="label">Gravity.apply</span>(<span class="keyword">badgeGravity, </span></span><br><span class="line">    <span class="keyword">badge.getIntrinsicWidth(), </span><span class="keyword">badge.getIntrinsicHeight(), </span></span><br><span class="line">    new Rect(<span class="number">0</span>, <span class="number">0</span>, getWidth(), getHeight()), </span><br><span class="line">    <span class="keyword">badgePadding, </span><span class="keyword">badgePadding, </span></span><br><span class="line">    <span class="keyword">bound);</span><br><span class="line"></span><span class="keyword">badge.setBounds(bound);</span></span><br></pre></td></tr></table></figure></p>
<p>2、如何设置形状为正方形<br>需要重写onMeasure，<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthSpec, <span class="keyword">int</span>  heightSpec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onMeasure(widthSpec, heightSpec);</span><br><span class="line">    <span class="keyword">int</span> fixedSize = Math.min(getMeasuredWidth(), getMeasuredHeight());</span><br><span class="line">    setMeasuredDimension(fixedSize, fixedSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>关键就在于setMeasureDimension(fixedSize, fixedSize)。<br>在super.onMeasure里面，setMeasureDimension已经执行过，所以必须在后面再调用一次，改成宽高相等。</p>
<p>还有另一种方法，设置heightSpec和widthSpec一致，<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthSpec, <span class="keyword">int</span>  heightSpec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hSpec = MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthSpec),</span><br><span class="line">            MeasureSpec.EXACTLY);</span><br><span class="line">    <span class="keyword">super</span>.onMeasure(widthSpec, hSpec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注意，只能根据widthSpec，调整heightSpec。反过来没有效果。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthSpec, <span class="keyword">int</span>  heightSpec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> wSpec = MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(heightSpec),</span><br><span class="line">            MeasureSpec.EXACTLY);</span><br><span class="line">    <span class="keyword">super</span>.onMeasure(wSpec, heightSpec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这种方式没有效果。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>1、如何设置drawable的padding和gravity<br>可以在draw之前，通过Gravity的apply方法实现。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://pleaseyouya.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自定义view(view上添加一个stateful drawable)]]></title>
    <link href="http://pleaseyouya.com/2016/01/23/%E8%87%AA%E5%AE%9A%E4%B9%89view-view%E4%B8%8A%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AAstateful-drawable/"/>
    <id>http://pleaseyouya.com/2016/01/23/自定义view-view上添加一个stateful-drawable/</id>
    <published>2016-01-23T07:11:17.000Z</published>
    <updated>2016-01-30T09:42:30.000Z</updated>
    <content type="html"><![CDATA[<p>新添加的drawable，奇数次点击的时候会显示，偶数次点击的时候隐藏。 假设，新添加的drawable，叫foreground。</p>
<a id="more"></a>
<p>一、如何根据view的状态(比如点击), 改变drawable(隐藏，显示)？ </p>
<blockquote>
<p>view状态发生变化，会引起其内含的drawable的状态也发生变化。</p>
</blockquote>
<p>1、view在状态改变时，会调用refreshDrawableState</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">refreshDrawableState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ... </span><br><span class="line">    drawableStateChanged();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">drawableStateChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Drawable d=mBackground;</span><br><span class="line">    <span class="keyword">if</span> (d !=<span class="keyword">null</span> &amp;&amp; d.isStateful()) &#123;</span><br><span class="line">        d.setState(getDrawableState());</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>drawableStateChanged对背景图片进行了重绘，绘制的实现在setState当中实现。</p>
<p>调用setState的前提是isStateful返回true。Drawable类的isStateful默认是返回false的。因此，我们要添加的foreground，其内部实现必须override isStateful方法。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span> </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isStateful</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们这里用的foreground，如果继承自StateListDrawable，则不需要override，因为StateListDrawable中isStateful返回true。事实上，一个selector xml文件就对应了一个StateListDrawable。 </p>
<p>现在想要添加foreground，所以，需要override drawableStateChanged这个方法，在原有逻辑的基础上，添加foreground的状态同步。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span> </span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">drawableStateChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.drawableStateChanged();</span><br><span class="line">    <span class="keyword">if</span> (foreground !=<span class="keyword">null</span> &amp;&amp; foreground.isStateful()) &#123;</span><br><span class="line">        foreground.setState(getDrawableState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2、foreground如何通过setState同步状态的<br>看下Drawable类中setState的实现<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">setState</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span>[] stateSet)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!Arrays.equals(mStateSet, stateSet)) &#123;</span><br><span class="line">        mStateSet=stateSet;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="title">onStateChange</span><span class="params">(stateSet)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onStateChange</span><span class="params">(<span class="keyword">int</span>[] stateSet)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//要找出第一个吻合当前状态的Drawable对象 </span></span><br><span class="line">    <span class="keyword">int</span> idx=mStateListState.indexOfStateSet(stateSet);</span><br><span class="line">    ... <span class="comment">//获取对应索引位置的Drawable对象  </span></span><br><span class="line">    <span class="keyword">if</span> (selectDrawable(idx)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">selectDrawable</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (idx==mCurIndex) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (idx &gt;=<span class="number">0</span> &amp;&amp; idx &lt; mDrawableContainerState.mNumChildren) &#123;</span><br><span class="line">        <span class="keyword">final</span> Drawable d=mDrawableContainerState.getChild(idx);</span><br><span class="line">        mCurrDrawable=d;</span><br><span class="line">        mCurIndex=idx;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mCurrDrawable=<span class="keyword">null</span>;</span><br><span class="line">        mCurIndex=-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    invalidateSelf();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>stateSet数组代表了新的状态，比如(pressed, window_focused)。只有新的状态和当前状态不一致，才会重绘。</p>
<p>通过新的状态，找到对应的drawable，并进行重绘。<br>重绘在invalidateSelf中实现。</p>
<p>3、drawable如何实现重绘<br>看下drawable类的invalidateSelf的实现，<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">invalidateSelf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Callback callback = getCallback();</span><br><span class="line">    <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">        callback.invalidateDrawable(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过callback接口的invalidateDrawable来实现的，这个callback就是view本身了。</p>
<p>所以，需要对foreground设置callback为view本身。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foreground.setCallback(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></p>
<p>4、view调用invalidateDrawable重绘<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Invalidates the specified Drawable.  </span></span><br><span class="line"><span class="comment">//默认实现，重新绘制该视图本身  </span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">invalidateDrawable</span><span class="params">(Drawable drawable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (verifyDrawable(drawable)) &#123;</span><br><span class="line">        <span class="comment">//是否是同一个Drawable对象，通常为真  </span></span><br><span class="line">        <span class="keyword">final</span> Rect dirty=drawable.getBounds();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> scrollX=mScrollX;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> scrollY=mScrollY;</span><br><span class="line">        <span class="comment">//重新请求绘制该View，即重新调用该View的draw()方法  </span></span><br><span class="line">        ...  </span><br><span class="line">        invalidate(dirty.left + scrollX, dirty.top + scrollY, dirty.right + scrollX, dirty.bottom + scrollY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>所以，如果要让drawable显示出来，verifyDrawable必须对该drawable，返回true。</p>
<p>必须覆盖verifyDrawable，view上的所有drawable都必须调用这个方法，并返回true。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span> </span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">boolean</span> <span class="title">verifyDrawable</span><span class="params">(Drawable who)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.verifyDrawable(who) || (who==foreground);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>二、measure-layout-draw绘制流程中foreground如何添加进去<br>measure采用默认的实现方式即可。</p>
<p>layout过程中有一个方法必须覆盖，onSizeChanged，因为该方法默认是空实现。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">    <span class="keyword">if</span> (foreground != <span class="keyword">null</span>) &#123;</span><br><span class="line">        foreground.setBounds(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>draw()方法也需要override，<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.draw(canvas);</span><br><span class="line">    <span class="keyword">if</span> (foreground != <span class="keyword">null</span>) &#123;</span><br><span class="line">        foreground.draw(canvas);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>新添加的drawable，奇数次点击的时候会显示，偶数次点击的时候隐藏。 假设，新添加的drawable，叫foreground。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://pleaseyouya.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自定义drawable(内容文字)]]></title>
    <link href="http://pleaseyouya.com/2016/01/22/%E8%87%AA%E5%AE%9A%E4%B9%89drawable-%E5%86%85%E5%AE%B9%E6%96%87%E5%AD%97/"/>
    <id>http://pleaseyouya.com/2016/01/22/自定义drawable-内容文字/</id>
    <published>2016-01-21T16:11:30.000Z</published>
    <updated>2016-01-30T09:43:59.000Z</updated>
    <content type="html"><![CDATA[<p>自定义一个drawable，内容是文字，可以设置文字内容，文字颜色，字体，字体大小，padding，字体样式(粗体，斜体，正常)、drawable圆角半径。</p>
<a id="more"></a>
<p>1、设置文本相关属性<br>设置文本抗锯齿和子像素抗锯齿，让文本更平滑<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TextPaint textPaint = new TextPaint<span class="list">(<span class="keyword">Paint</span>.ANTI_ALIAS_FLAG | Paint.SUBPIXEL_TEXT_FLAG)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>设置字体，“sans-serif-black”，正常样式<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">textPaint</span><span class="class">.setTypeface</span>(<span class="tag">Typeface</span><span class="class">.create</span>("<span class="tag">sans-serif-black</span>", <span class="tag">Typeface</span><span class="class">.NORMAL</span>));</span><br></pre></td></tr></table></figure></p>
<p>设置字体大小，单位为像素<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DisplayMetrics dm = context.getResources().getDisplayMetrics();</span><br><span class="line"><span class="keyword">float</span> scaledDensity = dm.scaledDensity;</span><br><span class="line">textPaint.setTextSize(<span class="number">12</span> * scaledDensity); <span class="comment">// 12dp</span></span><br></pre></td></tr></table></figure></p>
<p>2、设置完属性后，获取文本宽高<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Rect textBounds = new Rect();</span><br><span class="line">textPaint.getTextBounds(<span class="type">text</span>, <span class="number">0</span>, <span class="type">text</span>.<span class="property">length</span>, textBounds);</span><br></pre></td></tr></table></figure></p>
<p>3、获取drawable的宽高<br>宽等于文本宽度加上左右padding，高等于文本高度加上上下padding，单位像素<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">float</span> density = dm.density;</span><br><span class="line"><span class="built_in">float</span> padding = density * <span class="number">4</span>; <span class="comment">// 4dp</span></span><br><span class="line"><span class="variable">width</span> = (<span class="built_in">int</span>)(padding + textBounds.<span class="variable">width</span>() + padding);</span><br><span class="line"><span class="variable">height</span> = (<span class="built_in">int</span>)(padding + textBounds.<span class="variable">height</span>() + padding);</span><br></pre></td></tr></table></figure></p>
<p>4、将文本画在bitmap的画布上<br>创建bitmap<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bitmap </span>= <span class="keyword">Bitmap.createBitmap(width, </span>height, <span class="keyword">Bitmap.Config.ARGB_8888);</span></span><br></pre></td></tr></table></figure></p>
<p>设置文字透明<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitmap.setHasAlpha(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></p>
<p>获取bitmap的画布<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Canvas canvas = new Canvas<span class="list">(<span class="keyword">bitmap</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>设置背景抗锯齿<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Paint backgroundPaint = new Paint<span class="list">(<span class="keyword">Paint</span>.ANTI_ALIAS_FLAG)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>设置背景颜色<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">backgroundPaint</span><span class="class">.setColor</span>(<span class="tag">badgeColor</span>);</span><br></pre></td></tr></table></figure></p>
<p>画圆角背景到bitmap上<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> cornerRadius = <span class="number">2</span> * density; <span class="comment">// 2dp</span></span><br><span class="line">canvas.drawRoundRect(<span class="number">0</span>, <span class="number">0</span>, width, height, cornerRadius, cornerRadius, backgroundPaint);</span><br></pre></td></tr></table></figure></p>
<p>将文字画在bitmap上，颜色为透明<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">textPaint<span class="class">.setXfermode</span>(new <span class="function">PorterDuffXfermode</span>(PorteDuff<span class="class">.Mode</span><span class="class">.CLEAR</span>));</span><br><span class="line"><span class="tag">canvas</span><span class="class">.drawText</span>(<span class="value">text</span>, <span class="attribute">padding</span>, <span class="attribute">height</span> - <span class="attribute">padding</span>, textPaint);</span><br></pre></td></tr></table></figure></p>
<p>文字的起点是左下角(padding, height - padding)。</p>
<p>5、将bitmap画在自定义的drawable上<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</span><br><span class="line">        canvas.drawBitmap(bitmap, getBounds().left, getBounds().top, paint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>自定义一个drawable，内容是文字，可以设置文字内容，文字颜色，字体，字体大小，padding，字体样式(粗体，斜体，正常)、drawable圆角半径。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://pleaseyouya.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自定义View时如何自定义属性]]></title>
    <link href="http://pleaseyouya.com/2016/01/21/%E8%87%AA%E5%AE%9A%E4%B9%89View%E6%97%B6%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7/"/>
    <id>http://pleaseyouya.com/2016/01/21/自定义View时如何自定义属性/</id>
    <published>2016-01-21T15:00:21.000Z</published>
    <updated>2016-01-30T09:44:39.000Z</updated>
    <content type="html"><![CDATA[<p>在自定义view的时候，如何自定义属性？<br>比如现在要自定义BadgedImageView，需要自定义gravity, padding, text, color属性。</p>
<a id="more"></a>
<p>1、在styles.xml中声明属性集，集合中包含gravity, padding, text, color四种属性。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">declare-styleable</span> <span class="attribute">name</span>=<span class="value">"BadgedImageView"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="title">declare-styleable</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>gravity包含了top, bottom, left, right, start, end这几种情况：<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">attr</span> name = <span class="string">"badgeGravity"</span>&gt;</span><br><span class="line">    &lt;flag name = <span class="string">"top"</span> <span class="built_in">value</span> = <span class="string">"0x30"</span> /&gt;</span><br><span class="line">    &lt;flag name = <span class="string">"bottom"</span> <span class="built_in">value</span> = <span class="string">"0x50"</span> /&gt;</span><br><span class="line">    &lt;flag name = <span class="string">"left"</span> <span class="built_in">value</span> = <span class="string">"0x03"</span> /&gt;</span><br><span class="line">    &lt;flag name = <span class="string">"right"</span> <span class="built_in">value</span> = <span class="string">"0x05"</span> /&gt;</span><br><span class="line">    &lt;flag name = <span class="string">"start"</span> <span class="built_in">value</span> = <span class="string">"0x00800003"</span> /&gt;</span><br><span class="line">    &lt;flag name = <span class="string">"end"</span> <span class="built_in">value</span> = <span class="string">"0x0080000"</span> /&gt;</span><br><span class="line">&lt;/<span class="built_in">attr</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>padding是int类型<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;attr <span class="property">name</span> = <span class="string">"badgePadding"</span> format = <span class="string">"dimension"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>text是string类型<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;attr <span class="property">name</span> = <span class="string">"badgeText"</span> format = <span class="string">"string"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>color是color类型<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;attr <span class="property">name</span> = <span class="string">"badgeColor"</span> format = <span class="string">"color"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>2、编译过程中，自定义属性会被分配id，格式是：属性集_属性名。</p>
<p>所以，gravity属性的id是<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BadgedImageView_badgeGravity</span><br></pre></td></tr></table></figure></p>
<p>padding属性的id是<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BadgedImageView_badgePadding</span><br></pre></td></tr></table></figure></p>
<p>text属性的id是<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BadgedImageView_badgeText</span><br></pre></td></tr></table></figure></p>
<p>color属性的id是<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BadgedImageView_badgeColor</span><br></pre></td></tr></table></figure></p>
<p>这些id，可用于在代码中提取自定义view的相应属性在layout文件中设置的值。</p>
<p>3、如何在布局文件中使用<br>在layout文件中，需要先定义命名空间<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">xmlns:</span>app=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br></pre></td></tr></table></figure></p>
<p>然后，在需要自定义view的地方，即可使用自定义属性<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;com<span class="class">.pleaseyouya</span><span class="class">.androidbasis</span><span class="class">.drawable</span><span class="class">.BadgedFourThreeImageView</span></span><br><span class="line">    android:id=<span class="string">"@+id/badge_dog"</span></span><br><span class="line">    android:layout_width=<span class="string">"300dp"</span></span><br><span class="line">    android:layout_height=<span class="string">"200dp"</span></span><br><span class="line">    android:src=<span class="string">"@drawable/dog"</span></span><br><span class="line">    app:badgeGravity=<span class="string">"top|right"</span></span><br><span class="line">    app:badgePadding=<span class="string">"20dp"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>4、自定义View如何获取自定义属性的值<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TypedArray <span class="literal">a</span> = context.obtainStyledAttributes(attrs, R.styleable.BadgedImageView, <span class="number">0</span>, <span class="number">0</span>)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">badgeGravity = <span class="literal">a</span>.getInt(R.styleable.BadgedImageView_badgeGravity, Gravity.END | Gravity.BOTTOM)<span class="comment">;</span></span><br><span class="line">badgePadding = <span class="literal">a</span>.getDimensionPixelSize(R.styleable.BadgedImageView_badgePadding, <span class="number">0</span>)<span class="comment">;</span></span><br><span class="line">badgeText = <span class="literal">a</span>.getString(R.styleable.BadgedImageView_badgeText)<span class="comment">;</span></span><br><span class="line">badgeColor = <span class="literal">a</span>.getColor(R.styleable.BadgedImageView_badgeColor, Color.WHITE)<span class="comment">;</span></span><br><span class="line"><span class="literal">a</span>.recycle()<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在自定义view的时候，如何自定义属性？<br>比如现在要自定义BadgedImageView，需要自定义gravity, padding, text, color属性。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅谈xml:tools]]></title>
    <link href="http://pleaseyouya.com/2016/01/21/%E6%B5%85%E8%B0%88xml-tools/"/>
    <id>http://pleaseyouya.com/2016/01/21/浅谈xml-tools/</id>
    <published>2016-01-21T14:14:57.000Z</published>
    <updated>2016-01-30T09:45:30.000Z</updated>
    <content type="html"><![CDATA[<p>在layout布局文件中可以看到这个属性<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">xm</span><span class="variable">l:tools</span> = <span class="string">"http://schemas.android.com/tools"</span></span><br></pre></td></tr></table></figure></p>
<p>这个属性是干什么的呢？</p>
<a id="more"></a>
<p>开发项目的时候，有时候为了看预览布局，会硬编码一些属性的值。比如text属性硬编码，查看效果。<br>然后，这些硬编码的属性应该去掉，有时候开发可能就会忘了这事。</p>
<p>这时候，tools就派上用场了。<br>tools可以告诉android studio，tools命名空间下的属性只在预览效果时使用，在实际运行时，这些属性都会自动被忽略。</p>
<p>比如：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">    android:layout_width = <span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height = <span class="string">"wrap_content"</span></span><br><span class="line">    tools:<span class="type">text</span> = <span class="string">"Hello World"</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></p>
<p>硬编码的”Hello World”，在app运行时会被忽略的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在layout布局文件中可以看到这个属性<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">xm</span><span class="variable">l:tools</span> = <span class="string">"http://schemas.android.com/tools"</span></span><br></pre></td></tr></table></figure></p>
<p>这个属性是干什么的呢？</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ScrollView解决超出屏幕高度的layout]]></title>
    <link href="http://pleaseyouya.com/2016/01/21/ScrollView%E8%A7%A3%E5%86%B3%E8%B6%85%E5%87%BA%E5%B1%8F%E5%B9%95%E9%AB%98%E5%BA%A6%E7%9A%84layout/"/>
    <id>http://pleaseyouya.com/2016/01/21/ScrollView解决超出屏幕高度的layout/</id>
    <published>2016-01-20T16:22:53.000Z</published>
    <updated>2016-01-30T09:46:26.000Z</updated>
    <content type="html"><![CDATA[<p>做一个个人中心页面的时候，涉及到的布局超出了屏幕高度(布局包含了诸如收藏，钱包，优惠，登陆，注册等等)，然后发现超出屏幕的部分显示不出来，并且页面无法滑动。</p>
<a id="more"></a>
<p>解决办法是，对于太长的布局，需要将其包在一个ScrollView当中。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ScrollView</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">xmlns:app</span>=<span class="value">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 超长布局 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 想多长都行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ScrollView</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>做一个个人中心页面的时候，涉及到的布局超出了屏幕高度(布局包含了诸如收藏，钱包，优惠，登陆，注册等等)，然后发现超出屏幕的部分显示不出来，并且页面无法滑动。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://pleaseyouya.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[onTouch和onTouchEvent的传递过程]]></title>
    <link href="http://pleaseyouya.com/2016/01/20/ontouch%E5%92%8ConTouchEvent%E7%9A%84%E4%BC%A0%E9%80%92%E8%BF%87%E7%A8%8B/"/>
    <id>http://pleaseyouya.com/2016/01/20/ontouch和onTouchEvent的传递过程/</id>
    <published>2016-01-19T16:36:25.000Z</published>
    <updated>2016-01-30T09:47:09.000Z</updated>
    <content type="html"><![CDATA[<p>ontouch和onTouchEvent的传递过程是自上而下的。<br>这里的自上而下，是指从父view开始，接着传递给子view。其中传递过程牵涉到三个重要的方法，分别是onInterceptTouchEvent，onTouch，onTouchEvent。</p>
<p>只有ViewGroup类型的控件才有onInterceptTouchEvent方法。比如ListView有onInterceptTouchEvent，但textView则没有改方法。</p>
<a id="more"></a>
<p>对每一个view来说，如果它可以执行onTouch或者onTouchEvent，那么，优先执行onTouch。</p>
<p>为了说明传递的过程，举个简单的例子。A是父view，B是A的子view，而C是B的子view。</p>
<blockquote>
<p>A contains B, B contains C</p>
</blockquote>
<p>当touch C，onTouch和onTouchEvent的传递过程是：</p>
<blockquote>
<p>A：onInterceptTouchEvent-&gt;false, 传递给B<br>B：onInterceptTouchEvent-&gt;false, 传递给C<br>C：不是view group，直接执行onTouch-&gt;false，继续执行onTouchEvent-&gt;false，传递给B<br>B：执行onTouch-&gt;false，继续执行onTouchEvent-&gt;false,传递给A<br>A：执行onTouch-&gt;false，继续执行onTouchEvent-&gt;false，结束。</p>
</blockquote>
<p>onInterceptTouchEvent可以看成是向下传递的拦截器，如果返回true，则不传递给子view了，将由当前view直接执行onTouch。<br>而onTouch和onTouchEvent可以看成是向上传递的拦截器，如果返回true,则不传递给父view了，将结束本次传递。</p>
<blockquote>
<p>如果onTouch或onTouchEvent返回true，则后面的事件将不会调用该view的onInterceptTouchEvent，传递到该view时，直接传递给onTouch或onTouchEvent执行。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>ontouch和onTouchEvent的传递过程是自上而下的。<br>这里的自上而下，是指从父view开始，接着传递给子view。其中传递过程牵涉到三个重要的方法，分别是onInterceptTouchEvent，onTouch，onTouchEvent。</p>
<p>只有ViewGroup类型的控件才有onInterceptTouchEvent方法。比如ListView有onInterceptTouchEvent，但textView则没有改方法。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[listview setDivider无效]]></title>
    <link href="http://pleaseyouya.com/2016/01/16/listview-setDivider%E6%97%A0%E6%95%88/"/>
    <id>http://pleaseyouya.com/2016/01/16/listview-setDivider无效/</id>
    <published>2016-01-16T13:30:39.000Z</published>
    <updated>2016-01-30T09:47:49.000Z</updated>
    <content type="html"><![CDATA[<p>在程序里面设置listview的divider的时候，发现没有效果。</p>
<a id="more"></a>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setDivider</span><span class="params">(Drawable divider)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (divider != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mDividerHeight = divider.getIntrinsicHeight();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mDividerHeight = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//....</span></span><br></pre></td></tr></table></figure>
<p>再看下getIntrinsicHeight()<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIntrinsicHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>所以，setDivider会导致mDividerHeight变成0或者-1，从而无法显示divider。所以，必须在setDivider后面设置mDividerHeight。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listView.setDivider(<span class="keyword">new</span> ColorDrawable(<span class="number">0xffd4d5d6</span>));</span><br><span class="line">listView.setDividerHeight(<span class="number">2</span>);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：setDividerHeight只能放在setDivider后面，不能放在前面。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>在程序里面设置listview的divider的时候，发现没有效果。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://pleaseyouya.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[listview常见使用场景]]></title>
    <link href="http://pleaseyouya.com/2016/01/16/listview%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>http://pleaseyouya.com/2016/01/16/listview常见使用场景/</id>
    <published>2016-01-16T09:59:49.000Z</published>
    <updated>2016-01-30T09:48:25.000Z</updated>
    <content type="html"><![CDATA[<p>场景1、滑动到底部或者顶部时，去掉底部或顶部产生的阴影。</p>
<a id="more"></a>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//去掉滑动到底部时或者顶部时产生的阴影divider</span></span><br><span class="line">listView.setOverScrollMode<span class="comment">(View.OVER_SCROLL_NEVER)</span>;</span><br></pre></td></tr></table></figure>
<p>场景2、让listview滑动到底部<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">listView.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        listView.smoothScrollToPosition(listView.getCount()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>还有另一种方式, listview.setSelection(listview.getCount()-1)，但是这种方式没有滑动的动画效果。</p>
<p>场景3、让listview向下滑动一个item<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">listView.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        listView.smoothScrollByOffset(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>场景4、让listview向上滑动1个item<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">listView.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        listView.smoothScrollByOffset(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>场景5、listview数据变化后，重新从第一个item展示<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listview.<span class="function"><span class="title">setSelection</span><span class="params">(<span class="number">0</span>)</span></span></span><br></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">listview</span><span class="class">.setSelectionAfterHeaderView</span>();</span><br></pre></td></tr></table></figure></p>
<p>场景6、item中的textview不会抢焦点，但是button会抢焦点，导致listview的onItemClick不被调用。<br>需要每一个item view设置android:descendantFocusability=”blocksDescendants”, 比如：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    android:orientation=<span class="string">"horizontal"</span></span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">    android:descendantFocusability=<span class="string">"blocksDescendants"</span></span><br><span class="line">    &gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:<span class="property">id</span>=<span class="string">"@+id/text"</span></span><br><span class="line">        android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">        android:layout_height=<span class="string">"60dp"</span></span><br><span class="line">        android:<span class="type">text</span>=<span class="string">"@string/hello_world"</span></span><br><span class="line">        android:gravity=<span class="string">"center_vertical"</span></span><br><span class="line">        /&gt;</span><br><span class="line">    &lt;Button</span><br><span class="line">        android:<span class="property">id</span>=<span class="string">"@+id/btn"</span></span><br><span class="line">        android:<span class="type">text</span>=<span class="string">"btn"</span></span><br><span class="line">        android:layout_width=<span class="string">"100dp"</span></span><br><span class="line">        android:layout_height=<span class="string">"50dp"</span>/&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p>
<p>这样onItemClick可以正常执行，并且button当点击时同样可以获取焦点。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>场景1、滑动到底部或者顶部时，去掉底部或顶部产生的阴影。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://pleaseyouya.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅谈android sharedpreferences mode]]></title>
    <link href="http://pleaseyouya.com/2016/01/16/%E6%B5%85%E8%B0%88android-sharedpreferences-mode/"/>
    <id>http://pleaseyouya.com/2016/01/16/浅谈android-sharedpreferences-mode/</id>
    <published>2016-01-16T06:25:18.000Z</published>
    <updated>2016-01-30T09:48:42.000Z</updated>
    <content type="html"><![CDATA[<p>目标：实现两个进程间通信，通过sharedPreferences。</p>
<a id="more"></a>
<ol>
<li><h3 id="u95EE_u9898_uFF1A_u5728_u8FDB_u7A0BA_u4E2D_u5B58_u6570_u636E_uFF0C_u4F46_u662F_u5728_u8FDB_u7A0BB_u4E2D_u5374_u53D6_u4E0D_u5230_u6570_u636E_uFF1F"><a href="#u95EE_u9898_uFF1A_u5728_u8FDB_u7A0BA_u4E2D_u5B58_u6570_u636E_uFF0C_u4F46_u662F_u5728_u8FDB_u7A0BB_u4E2D_u5374_u53D6_u4E0D_u5230_u6570_u636E_uFF1F" class="headerlink" title="问题：在进程A中存数据，但是在进程B中却取不到数据？"></a>问题：在进程A中存数据，但是在进程B中却取不到数据？</h3><p><em>发现问题</em>：进程A在getSharedPreferences的模式是<em>MODE_PRIVATE</em>，此时进程B肯定读不到。<br><em>正确的做法</em>：进程A在getSharedPreferences的模式是MODE_WORLD_READABLE</p>
<figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getSharedPreferences(<span class="string">"pref"</span>, <span class="type">Context</span>.<span class="type">MODE_WORLD_READABLE</span>).edit<span class="literal">()</span></span><br><span class="line">                        .putString</span><br><span class="line">                        (<span class="string">"key"</span>,</span><br><span class="line">                        <span class="string">"world readable"</span>).commit<span class="literal">()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="u95EE_u9898_uFF1A_u5728_u8FDB_u7A0BA_u4E2D_u4FEE_u6539sharedPreference_u6570_u636E_uFF0C_u4F46_u662F_u5728_u8FDB_u7A0BB_u8BFB_u5230_u7684_u59CB_u7EC8_u662F_u7B2C_u4E00_u6B21_u7684_u6570_u636E_uFF1F"><a href="#u95EE_u9898_uFF1A_u5728_u8FDB_u7A0BA_u4E2D_u4FEE_u6539sharedPreference_u6570_u636E_uFF0C_u4F46_u662F_u5728_u8FDB_u7A0BB_u8BFB_u5230_u7684_u59CB_u7EC8_u662F_u7B2C_u4E00_u6B21_u7684_u6570_u636E_uFF1F" class="headerlink" title="问题：在进程A中修改sharedPreference数据，但是在进程B读到的始终是第一次的数据？"></a>问题：在进程A中修改sharedPreference数据，但是在进程B读到的始终是第一次的数据？</h3><p><em>发现问题</em>：进程B在getSharedPreferences的模式不是<em>MODE_MULTI_PROCESS</em>，preference并没有从文件中reload。<br><em>正确的做法</em>：进程B在getSharedPreferences的模式是<em>MODE_MULTI_PROCESS</em>，每次获取都会reload。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String </span>s = getSharedPreferences(<span class="string">"pref"</span>, MODE_MULTI_PROCESS).getString(<span class="string">"key"</span>,</span><br><span class="line">                <span class="string">"default"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>具体的内部逻辑可参考ContextImpl源码，后续会给出原因分析。</p>
<p>性能考虑：<br>commit()和apply()每次都是将所有的设置信息写入文件，比如putString(“key”, “data”).commit()， 并非只将key-data写入，而是所有的设置重写一遍。所以，不要每次putXXX就commit一次。<br>所以，<br><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sharedpreferences.edit<span class="literal">()</span>.putString(<span class="string">"key1"</span>, <span class="string">"data1"</span>);</span><br><span class="line">sharedpreferences.edit<span class="literal">()</span>.putString(<span class="string">"key2"</span>, <span class="string">"data2"</span>);</span><br><span class="line">sharedpreferences.edit<span class="literal">()</span>.commit<span class="literal">()</span>;</span><br></pre></td></tr></table></figure></p>
<p>性能比如下好：<br><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sharedpreferences.edit<span class="literal">()</span>.putString(<span class="string">"key1"</span>, <span class="string">"data1"</span>).commit<span class="literal">()</span>;</span><br><span class="line">sharedpreferences.edit<span class="literal">()</span>.putString(<span class="string">"key2"</span>, <span class="string">"data2"</span>).commit<span class="literal">()</span>;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>目标：实现两个进程间通信，通过sharedPreferences。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅谈listview的divider]]></title>
    <link href="http://pleaseyouya.com/2016/01/14/android-headerDividersEnabled%E5%92%8Candroid-footerDividersEnabled/"/>
    <id>http://pleaseyouya.com/2016/01/14/android-headerDividersEnabled和android-footerDividersEnabled/</id>
    <published>2016-01-13T16:21:47.000Z</published>
    <updated>2016-01-30T09:28:23.000Z</updated>
    <content type="html"><![CDATA[<p>在android中，listview可以添加header和footer。<br>不管是header还是footer，和listview的item之间默认都有divider。<br><a id="more"></a><br>如果添加header时不希望和第一个item有divider，<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">android:headerDividersEnabled </span>= <span class="string">"false"</span></span><br></pre></td></tr></table></figure></p>
<p>如果添加footer时不希望和最后一个item有divider，<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">android:footerDividersEnabled </span>= <span class="string">"false"</span></span><br></pre></td></tr></table></figure></p>
<p>listview的第一个item的上边和最后一个item的下边默认都没有divider，而item之间都默认有。<br>如果想去掉所有的divider，包括header和footer的，<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">android:</span>divider=<span class="string">"@null"</span></span><br></pre></td></tr></table></figure></p>
<p>此时，headerDividersEnabled和footerDividersEnabled怎么设置都没效果了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在android中，listview可以添加header和footer。<br>不管是header还是footer，和listview的item之间默认都有divider。<br>]]>
    
    </summary>
    
      <category term="android" scheme="http://pleaseyouya.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[添加一个本地项目到github]]></title>
    <link href="http://pleaseyouya.com/2016/01/12/%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E5%88%B0github/"/>
    <id>http://pleaseyouya.com/2016/01/12/添加一个本地项目到github/</id>
    <published>2016-01-12T15:49:36.000Z</published>
    <updated>2016-01-30T09:51:00.000Z</updated>
    <content type="html"><![CDATA[<p>如何把一个项目推送到github上面呢？可以让git的版本管理帮你完成这件事。</p>
<a id="more"></a>
<p>既然git要完成推送本地项目到github的任务，它需要管理本地的项目，同时需要知道推送到github上哪一个地方。</p>
<pre><code>1、git需要管理本地项目，即把该项目转化成一个git仓库。
</code></pre><p>如何把一个项目转化成一个仓库呢？做法是，在项目本目录下，执行git init。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">git</span> init</span><br></pre></td></tr></table></figure>
<p>初始化之后，现在的git仓库是空的<br>一个仓库分3个区，名曰工作区、候选区和本地库。工作区可以想象成是一线地带，本地库则是本地的后台仓库。候选区表示了每一次提交到后台库的东西，相当于我们在工作区的文件中，把要存到后台库的文件都打钩，这些打钩的文件就是候选区中的文件啦。<br>候选区的意义在于，比如我们工作区有一些文件不想要加到本地库中，则不将其打钩（不放到候选区）；比如工作区有一些文件删除了，但是后台库相应的文件不想被删掉，则不将被删掉的文件打钩（不放到候选区）。<br>总而言之，同步到本地后台仓库需要两个步骤，一个是打钩（选择哪些文件要同步）；一个是提交。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git <span class="operator"><span class="keyword">commit</span> -<span class="keyword">m</span> <span class="string">"this is a comment"</span></span></span><br></pre></td></tr></table></figure>
<p>git add的作用就是将文件打钩（放到候选区），准备同步到本地后台库。<br>git commit的作用就是同步到本地后台库。</p>
<pre><code>2、要推送到github的什么地方，什么仓库
</code></pre><p>本地的git需要知道目的地址，否则无法做推送。首先需要在github上新建一个仓库。<br>然后让git知道该仓库的地址，并给这个仓库起个名字。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin <span class="string">https:</span><span class="comment">//pleaseyouya/AndroidBasis.git</span></span><br></pre></td></tr></table></figure>
<p>现在git知道了推送到仓库<a href="https://pleaseyouya/AndroidBasis.git，并且给该仓库起名叫做origin，当然，也可以起其他的名字。" target="_blank" rel="external">https://pleaseyouya/AndroidBasis.git，并且给该仓库起名叫做origin，当然，也可以起其他的名字。</a></p>
<pre><code>3、推送本地项目到github
</code></pre><p>最后，将本地的项目推送到github，<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">git</span> <span class="keyword">push </span>-u origin master</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如何把一个项目推送到github上面呢？可以让git的版本管理帮你完成这件事。</p>]]>
    
    </summary>
    
      <category term="git" scheme="http://pleaseyouya.com/tags/git/"/>
    
  </entry>
  
</feed>
